{"version":3,"sources":["api/index.js","store/index.js","components/Comment/Comment.js","components/CommentList/CommentsList.js","components/User/User.js","components/Post/Post.js","components/PostList/PostList.js","App.js","index.js"],"names":["getDataFromServer","data","fetch","concat","then","resolve","json","ACTION_TYPES","DELETE_POST","DELETE_COMMENT","FINISH_LOAD","START_LOAD","SHOW_ERROR","CHANGE_FILTER","finishLoad","posts","type","startLoad","errorOccur","initialState","isLoading","hasError","filter","getfilteredPosts","createSelector","state","post","title","includes","store","createStore","arguments","length","undefined","action","_objectSpread","Object","toConsumableArray","map","item","comments","comment","id","deletedId","applyMiddleware","thunk","Comment","_ref","user","deleteId","name","body","email","userName","react_default","a","createElement","className","onClick","_ref2","target","Number","defaultProps","connect","dispatch","deleteComment","CommentsList","components_Comment_Comment","key","User","_user$address","address","street","suite","city","deleteIdPost","deletePost","components_User_User","CommentList_CommentsList","filteredPosts","components_Post_Post","uuid","loadData","Promise","all","_data","slicedToArray","users","postsWithcomments","find","person","userId","postId","catch","changeInput","text","changeFilter","titleButton","classForButton","lengthFilteredPosts","lengthPosts","Fragment","htmlFor","placeholder","onChange","value","disabled","components_PostList_PostList","ReactDOM","render","es","src_App_0","document","getElementById"],"mappings":"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","file":"static/js/main.f2f4096d.chunk.js","sourcesContent":["const SOURCE_URL = 'https://jsonplaceholder.typicode.com/';\n\nconst getDataFromServer = data => (\n  fetch(`${SOURCE_URL}${data}`).then(resolve => resolve.json())\n);\n\nexport default getDataFromServer;\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { createSelector } from 'reselect';\nimport getDataFromServer from '../api';\n\nexport const loadDataFromServer = () => (dispatch) => {\n  dispatch(startLoad());\n  return Promise.all([\n    getDataFromServer('posts'),\n    getDataFromServer('users'),\n    getDataFromServer('comments'),\n  ]).then((data) => {\n    const [posts, users, comments] = data;\n\n    const postsWithcomments = [...posts].map(post => (\n      {\n        ...post,\n        user: users.find(person => person.id === post.userId),\n        comments: comments\n          .filter(comment => comment.postId === post.id)\n          .map(item => ({\n            ...item,\n            user: users.find(person => person.email === item.email),\n          })),\n      }\n    ));\n    dispatch(finishLoad(postsWithcomments));\n  }).catch(() => dispatch(errorOccur()));\n};\n\nconst ACTION_TYPES = {\n  DELETE_POST: 'DELETE_POST',\n  DELETE_COMMENT: 'DELETE_COMMENT',\n  FINISH_LOAD: 'FINISH_LOAD',\n  START_LOAD: 'START_LOAD',\n  SHOW_ERROR: 'SHOW_ERROR',\n  CHANGE_FILTER: 'CHANGE_FILTER',\n};\n\nconst finishLoad = posts => ({\n  type: ACTION_TYPES.FINISH_LOAD,\n  posts,\n});\n\nconst startLoad = () => ({\n  type: ACTION_TYPES.START_LOAD,\n});\n\nconst errorOccur = () => ({\n  type: ACTION_TYPES.SHOW_ERROR,\n});\n\nconst initialState = {\n  posts: [],\n  isLoading: false,\n  hasError: false,\n  filter: '',\n};\n\nexport const deletePost = id => ({\n  type: ACTION_TYPES.DELETE_POST,\n  deletedId: id,\n});\n\nexport const deleteComment = id => ({\n  type: ACTION_TYPES.DELETE_COMMENT,\n  deletedId: id,\n});\n\nexport const changeFilter = text => ({\n  type: ACTION_TYPES.CHANGE_FILTER,\n  filter: text,\n});\n\nfunction reducer(state = initialState, action = {}) {\n  switch (action.type) {\n    case ACTION_TYPES.DELETE_COMMENT:\n      return ({\n        ...state,\n        posts: [\n          ...state.posts\n            .map(item => (\n              {\n                ...item,\n                comments: [\n                  ...item.comments\n                    .filter(comment => comment.id !== action.deletedId),\n                ],\n              })),\n        ],\n      });\n    case ACTION_TYPES.DELETE_POST:\n      return ({\n        ...state,\n        posts: [...state.posts.filter(item => item.id !== action.deletedId)],\n      });\n    case ACTION_TYPES.START_LOAD:\n      return ({\n        ...state,\n        isLoading: true,\n        hasError: false,\n      });\n    case ACTION_TYPES.FINISH_LOAD:\n      return ({\n        ...state,\n        posts: [...action.posts],\n        isLoading: false,\n      });\n    case ACTION_TYPES.SHOW_ERROR:\n      return ({\n        ...state,\n        hasError: true,\n        isLoading: false,\n      });\n    case ACTION_TYPES.CHANGE_FILTER:\n      return ({\n        ...state,\n        filter: action.filter,\n      });\n    default:\n      return state;\n  }\n}\n\nconst getPosts = state => state.posts;\nconst getFilter = state => state.filter;\n\nexport const getfilteredPosts = createSelector(\n  [getPosts, getFilter],\n  (posts, filter) => posts.filter(post => post.title.includes(filter))\n);\n\nexport const store = createStore(\n  reducer,\n  initialState,\n  applyMiddleware(thunk)\n);\n","import React from 'react';\nimport './Comment.css';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { deleteComment } from '../../store';\n\nfunction Comment({ comment, user, deleteId }) {\n  const {\n    name,\n    body,\n    email,\n    id,\n  } = comment;\n  const userName = user.name;\n\n  return (\n    <li className=\"list-group-item list-group-item-info comment\">\n      <p className=\"list-group-item list-group-item-info comment__head\">\n        <button\n          id={id}\n          type=\"button\"\n          className=\"btn btn-danger btn-sm btn-del\"\n          title=\"Delete comment\"\n          onClick={({ target }) => deleteId(Number(target.id))}\n        >\n          x\n        </button>\n        {name}\n      </p>\n      <p className=\"list-group-item list-group-item-info comment__body\">\n        {body}\n      </p>\n      <p className=\"list-group-item list-group-item-info comment__user-info\">\n        {`user: ${userName} (${email})`}\n      </p>\n    </li>\n  );\n}\n\nComment.defaultProps = {\n  user: {\n    name: 'Guest',\n  },\n};\n\nComment.propTypes = {\n  comment: PropTypes.shape({\n    id: PropTypes.number,\n    name: PropTypes.string,\n    body: PropTypes.string,\n    email: PropTypes.string,\n    user: PropTypes.shape({\n      name: PropTypes.string,\n    }),\n  }).isRequired,\n  user: PropTypes.shape({\n    name: PropTypes.string,\n  }),\n  deleteId: PropTypes.func.isRequired,\n};\n\nconst getMethod = dispatch => ({\n  deleteId: id => dispatch(deleteComment(id)),\n});\n\nexport default connect(\n  null,\n  getMethod,\n)(Comment);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Comment from '../Comment/Comment';\n\nconst CommentsList = ({ comments }) => (\n  comments.map(\n    item => <Comment comment={item} user={item.user} key={item.id} />\n  )\n);\n\nCommentsList.propTypes = {\n  comments: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string,\n    body: PropTypes.string,\n    email: PropTypes.string,\n    user: PropTypes.shape({\n      name: PropTypes.string,\n    }),\n  })).isRequired,\n};\n\nexport default CommentsList;\n","import React from 'react';\nimport './User.css';\nimport PropTypes from 'prop-types';\n\nfunction User({ user }) {\n  const { name, email } = user;\n  const { street, suite, city } = user.address;\n\n  return (\n    <p className=\"list-group-item list-group-item-primary user-info\">\n      {\n        `User: ${name}, email: ${email} |\n        Adress: ${street}, ${suite}, ${city}`\n      }\n    </p>\n  );\n}\n\nUser.propTypes = {\n  user: PropTypes.shape({\n    name: PropTypes.string,\n    email: PropTypes.string,\n    address: PropTypes.shape({\n      street: PropTypes.string,\n      suite: PropTypes.string,\n      city: PropTypes.string,\n    }),\n  }).isRequired,\n};\n\nexport default User;\n","import React from 'react';\nimport './Post.css';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport CommentList from '../CommentList/CommentsList';\nimport User from '../User/User';\nimport { deletePost } from '../../store';\n\nfunction Post({ post, deleteIdPost }) {\n  const {\n    title,\n    body,\n    comments,\n    id,\n  } = post;\n\n  return (\n    <ul className=\"list-group post\">\n      <p className=\"list-group-item list-group-item-primary post__head\">\n        <button\n          id={id}\n          type=\"button\"\n          className=\"btn btn-danger btn-sm btn-del\"\n          title=\"Delete post\"\n          onClick={({ target }) => deleteIdPost(Number(target.id))}\n        >\n          x\n        </button>\n        {title}\n      </p>\n      <p className=\"list-group-item list-group-item-primary post__body\">\n        {body}\n      </p>\n      <User user={post.user} />\n      <CommentList comments={comments} />\n    </ul>\n  );\n}\n\nPost.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    userId: PropTypes.number,\n    title: PropTypes.string,\n    body: PropTypes.string,\n    user: PropTypes.shape({\n      name: PropTypes.string,\n      email: PropTypes.string,\n      address: PropTypes.shape({\n        street: PropTypes.string,\n        suite: PropTypes.string,\n        city: PropTypes.string,\n      }),\n    }),\n    comments: PropTypes.arrayOf(PropTypes.shape({\n      name: PropTypes.string,\n      body: PropTypes.string,\n      email: PropTypes.string,\n      user: PropTypes.shape({\n        name: PropTypes.string,\n      }),\n    })),\n  }).isRequired,\n  deleteIdPost: PropTypes.func.isRequired,\n};\n\nconst getMethod = dispatch => ({\n  deleteIdPost: id => dispatch(deletePost(id)),\n});\n\nexport default connect(\n  null,\n  getMethod\n)(Post);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport uuid from 'uuidv4';\nimport Post from '../Post/Post';\nimport { getfilteredPosts } from '../../store';\n\nconst PostList = ({ filteredPosts }) => (\n  filteredPosts.map(item => (\n    <Post post={item} key={uuid()} />\n  ))\n);\n\nPostList.propTypes = {\n  filteredPosts: PropTypes.arrayOf(PropTypes.shape({\n    title: PropTypes.string,\n    body: PropTypes.string,\n    user: PropTypes.shape({\n      name: PropTypes.string,\n      email: PropTypes.string,\n      address: PropTypes.shape({\n        street: PropTypes.string,\n        suite: PropTypes.string,\n        city: PropTypes.string,\n      }),\n    }),\n    comments: PropTypes.arrayOf(PropTypes.shape({\n      name: PropTypes.string,\n      body: PropTypes.string,\n      email: PropTypes.string,\n      user: PropTypes.shape({\n        name: PropTypes.string,\n      }),\n    })),\n  })).isRequired,\n};\n\nconst getData = state => ({\n  filteredPosts: getfilteredPosts(state),\n});\n\nexport default connect(\n  getData,\n)(PostList);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport './App.css';\nimport PostList from './components/PostList/PostList';\nimport { loadDataFromServer, changeFilter, getfilteredPosts } from './store';\n\nconst App = ({\n  posts,\n  filteredPosts,\n  isLoading,\n  hasError,\n  loadData,\n  changeInput,\n}) => {\n  const titleButton = (hasError ? 'Try again' : 'Load posts');\n  const classForButton = (\n    isLoading\n      ? 'btn btn-secondary'\n      : 'btn btn-primary'\n  );\n  const lengthFilteredPosts = filteredPosts.length;\n  const lengthPosts = posts.length;\n\n  return (\n    <div className=\"app\">\n      <div className=\"header\">\n        <h1>Static list of posts</h1>\n\n        {lengthPosts\n          ? (\n            <>\n              <p>{`posts:${lengthPosts}`}</p>\n              <div className=\"filter\">\n                <label htmlFor=\"filter\">\n                  FILTER BY POST TITLE:\n                  <input\n                    id=\"filter\"\n                    type=\"text\"\n                    placeholder=\"Enter text from title of post...\"\n                    onChange={({ target }) => changeInput(target.value)}\n                  />\n                  {lengthFilteredPosts !== lengthPosts\n                    && ` selected ${lengthFilteredPosts} posts`}\n                </label>\n              </div>\n            </>\n          )\n          : (\n            <>\n              <p>No posts yet..</p>\n              {hasError && (\n                <p className=\"alert alert-danger\">Error occurred!</p>)\n              }\n              <button\n                type=\"button\"\n                className={classForButton}\n                onClick={loadData}\n                disabled={isLoading}\n              >\n                {isLoading\n                  ? 'Loading...'\n                  : titleButton\n                }\n              </button>\n            </>\n          )\n        }\n      </div>\n      <PostList />\n    </div>\n  );\n};\n\nconst getDataState = state => ({\n  posts: state.posts,\n  isLoading: state.isLoading,\n  hasError: state.hasError,\n  filteredPosts: getfilteredPosts(state),\n});\n\nconst getMethod = dispatch => ({\n  loadData: () => dispatch(loadDataFromServer()),\n  changeInput: text => dispatch(changeFilter(text)),\n});\n\nconst shapePosts = PropTypes.shape({\n  userId: PropTypes.number,\n  id: PropTypes.number,\n  title: PropTypes.string,\n  body: PropTypes.string,\n});\n\nApp.propTypes = {\n  posts: PropTypes.arrayOf(shapePosts).isRequired,\n  filteredPosts: PropTypes.arrayOf(shapePosts).isRequired,\n  isLoading: PropTypes.bool.isRequired,\n  hasError: PropTypes.bool.isRequired,\n  loadData: PropTypes.func.isRequired,\n  changeInput: PropTypes.func.isRequired,\n};\n\nexport default connect(\n  getDataState,\n  getMethod\n)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport { store } from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}